{
  "openapi": "3.0.0",
  "info": {
    "title": "CyServer API v3",
    "version": "3.1.0",
    "description": "EBSI  v3",
    "termsOfService": "https://api-pilot.ebsi.eu/docs/terms",
    "contact": {
      "name": "EBSI Support - Service Desk",
      "url": "https://ec.europa.eu/digital-building-blocks/tracker/plugins/servlet/desk/portal/11"
    },
    "license": {
      "name": "EUPL-1.2",
      "url": "https://joinup.ec.europa.eu/page/eupl-text-11-12"
    }
  },
  "servers": [
    {
      "url": "http://testissuer.acgoldman.com:3005"
    },
    {
      "url": "http://localhost:3005"
    }
  ],
  "tags": [
    {
      "name": "Auth Server",
      "description": "Authorisation Server"
    },
    {
      "name": "Issuer Server",
      "description": "Credential Issuer"
    }
  ],
  "paths": {
    "/v3/auth/.well-known/openid-configuration": {
      "get": {
        "operationId": "get-openid-configuration",
        "tags": [
          "Auth Server"
        ],
        "summary": "Authorisation Server discovery metadata",
        "description": "Client or a wallet must obtain the Authorisation Server metadata prior to the transaction using strategies described in [OAuth 2.0 Authorization Server Metadata](https://www.rfc-editor.org/info/rfc8414) or out-of-band.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openid-configuration"
                },
                "examples": {
                  "ebsiAuthoriseAndAccredit": {
                    "summary": "Profile: EBSI Authorise and Accredit\n",
                    "value": {
                      "issuer": "https://api-conformance.ebsi.eu/conformance/v3/auth",
                      "authorization_endpoint": "https://api-conformance.ebsi.eu/conformance/v3/auth/authorize",
                      "token_endpoint": "https://api-conformance.ebsi.eu/conformance/v3/auth/token",
                      "jwks_uri": "https://api-conformance.ebsi.eu/conformance/v3/auth/jwks",
                      "redirect_uris": [
                        "https://api-conformance.ebsi.eu/conformance/v3/auth/direct_post"
                      ],
                      "scopes_supported": [
                        "openid"
                      ],
                      "response_types_supported": [
                        "vp_token",
                        "id_token"
                      ],
                      "response_modes_supported": [
                        "query"
                      ],
                      "grant_types_supported": [
                        "authorization_code"
                      ],
                      "subject_types_supported": [
                        "public"
                      ],
                      "id_token_signing_alg_values_supported": [
                        "ES256"
                      ],
                      "request_object_signing_alg_values_supported": [
                        "ES256"
                      ],
                      "request_parameter_supported": true,
                      "request_uri_parameter_supported": true,
                      "token_endpoint_auth_methods_supported": [
                        "private_key_jwt"
                      ],
                      "request_authentication_methods_supported": {
                        "authorization_endpoint": [
                          "request_object"
                        ]
                      },
                      "vp_formats_supported": {
                        "jwt_vp": {
                          "alg_values_supported": [
                            "ES256"
                          ]
                        },
                        "jwt_vc": {
                          "alg_values_supported": [
                            "ES256"
                          ]
                        }
                      },
                      "subject_syntax_types_supported": [
                        "did:key",
                        "did:ebsi"
                      ],
                      "subject_syntax_types_discriminations": [
                        "did:key:jwk_jcs-pub",
                        "did:ebsi:v1"
                      ],
                      "subject_trust_frameworks_supported": [
                        "ebsi"
                      ],
                      "id_token_types_supported": [
                        "subject_signed_id_token",
                        "attester_signed_id_token"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Internal Server Error",
                  "status": 500,
                  "detail": "Connection timeout\n"
                }
              }
            }
          }
        }
      }
    },
    "/v3/auth/jwks": {
      "get": {
        "tags": [
          "Auth Server"
        ],
        "summary": "Authorisation Server's JWKS endpoint",
        "description": "A JSON Web Key (JWK) used by the authorisation server. [RFC4627].\n",
        "operationId": "jwks",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/jwk-set+json": {
                "schema": {
                  "$ref": "#/components/schemas/jwks"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "title": "Internal Server Error",
                      "status": 500,
                      "detail": "The server encountered an internal error and was unable to complete your request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/auth/authorize": {
      "get": {
        "operationId": "get-authorize",
        "tags": [
          "Auth Server"
        ],
        "summary": "OIDC Authorization endpoint",
        "description": "After the discovery, the client proceeds with Verifiable Credential Issuance flow by requesting access for the required credential, from the Authorisation Server. The Authorisation Request Object must be signed with the client's private keys, owned by the requesting the client_id. The client's public key must be discoverable through client's openid-configuration through the jwks_uri parameter.\n",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "REQUIRED. OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified.\n",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "openid": {
                "summary": "OpenID",
                "value": "openid"
              }
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "required": true,
            "description": "REQUIRED. OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\nMUST be 'code'\n",
            "schema": {
              "type": "string"
            },
            "example": "code"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "description": "OAuth 2.0 Client Identifier valid at the Authorization Server.\n\nFor Holder wallet its DID\n\nFor Verifiable Accreditation Issuance: MUST be URL of the issuer requesting the accreditation that was registered with the Accreditation Issuer\n",
            "schema": {
              "type": "string"
            },
            "examples": {
              "accreditationIssuance": {
                "summary": "Accreditation or VC Issuance to Server/Cloud Wallet",
                "value": "https://my-issuer.eu/suffix/xyz"
              }
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "description": "REQUIRED. Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.\n",
            "schema": {
              "type": "string"
            },
            "example": "https://my-issuer.eu/suffix/xyz/code-cb"
          },
          {
            "name": "state",
            "in": "query",
            "description": "RECOMMENDED. Opaque value used to maintain state between the request\nand the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF)\nmitigation is done by cryptographically binding the value of this\nparameter with a browser cookie.\n",
            "schema": {
              "type": "string"
            },
            "example": "32f6e80d-bc60-4261-a1c0-c6fe0b15bd9f"
          },
          {
            "name": "nonce",
            "in": "query",
            "description": "OPTIONAL. String value used to associate a Client session with an ID Token, and to\nmitigate replay attacks. The value is passed through unmodified from the Authentication\nRequest to the ID or VP Token. Sufficient entropy MUST be present in the nonce values\nused to prevent attackers from guessing values.\n",
            "schema": {
              "type": "string"
            },
            "example": "n-0S6_WzA2Mj"
          },
          {
            "name": "request",
            "in": "query",
            "required": false,
            "description": "Only for Service Wallets. Authorisation Request Object - The Request Object must be signed with the client's private keys, owned by the requesting client_id. The used private key's public key must be discoverable through client's openid-configuration through jwks_uri parameter.\n\nSee the Authorisation Request Object schema.\n",
            "schema": {
              "type": "string",
              "format": "^(([A-Za-z0-9\\-_])+\\.)([A-Za-z0-9\\-_]+)(\\.([A-Za-z0-9\\-_]+))?$"
            },
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6Im1jX0pXbHc3ZTZjUnM5NFhTUXMxWGEyeWh3U1FQMm1XellCZ1NRY2lSOTAifQ.eyJzY29wZSI6Im9wZW5pZCIsImNsaWVudF9pZCI6Imh0dHBzOi8vY29uZm9ybWFuY2UtdGVzdC5lYnNpLmV1L2NvbmZvcm1hbmNlL3YzL2NsaWVudC1tb2NrL2RpZDplYnNpOnpnQU1Ya1oyZk00SnNSU2l4alY2QkpoIiwicmVkaXJlY3RfdXJpIjoiaHR0cHM6Ly9jb25mb3JtYW5jZS10ZXN0LmVic2kuZXUvY29uZm9ybWFuY2UvdjMvY2xpZW50LW1vY2svZGlkOmVic2k6emdBTVhrWjJmTTRKc1JTaXhqVjZCSmgvY29kZS1jYiIsInJlc3BvbnNlX3R5cGUiOiJjb2RlIiwic3RhdGUiOiI0MGQzYzZmNS0wMTY0LTQ3OTctOTg5ZS1kNWY4ZTg2YTAxMmYiLCJjbGllbnRfbWV0YWRhdGEiOnsiandrc191cmkiOiJodHRwczovL2NvbmZvcm1hbmNlLXRlc3QuZWJzaS5ldS9jb25mb3JtYW5jZS92My9jbGllbnQtbW9jay9kaWQ6ZWJzaTp6Z0FNWGtaMmZNNEpzUlNpeGpWNkJKaC9qd2tzIiwiYXV0aG9yaXphdGlvbl9lbmRwb2ludCI6Imh0dHBzOi8vY29uZm9ybWFuY2UtdGVzdC5lYnNpLmV1L2NvbmZvcm1hbmNlL3YzL2NsaWVudC1tb2NrL2RpZDplYnNpOnpnQU1Ya1oyZk00SnNSU2l4alY2QkpoL2F1dGhvcml6ZSJ9LCJhdXRob3JpemF0aW9uX2RldGFpbHMiOlt7InR5cGUiOiJvcGVuaWRfY3JlZGVudGlhbCIsImZvcm1hdCI6Imp3dF92YyIsImxvY2F0aW9ucyI6WyJodHRwczovL2NvbmZvcm1hbmNlLXRlc3QuZWJzaS5ldS9jb25mb3JtYW5jZS92My9pc3N1ZXItbW9jayJdLCJ0eXBlcyI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCIsIlZlcmlmaWFibGVBdHRlc3RhdGlvbiIsIlZlcmlmaWFibGVBdXRob3Jpc2F0aW9uVG9PbmJvYXJkIl19XSwiYXVkIjoiaHR0cHM6Ly9jb25mb3JtYW5jZS10ZXN0LmVic2kuZXUvY29uZm9ybWFuY2UvdjMvYXV0aC1tb2NrIiwiaXNzIjoiaHR0cHM6Ly9jb25mb3JtYW5jZS10ZXN0LmVic2kuZXUvY29uZm9ybWFuY2UvdjMvY2xpZW50LW1vY2svZGlkOmVic2k6emdBTVhrWjJmTTRKc1JTaXhqVjZCSmgifQ.bdBxZTbo5_THLdcLndNVf3ZGSBDTKqGnyK-E14Ah94lqjIk16DjSGNvibSaoGFeNGGknXttEvoZUSiEMh5ke7A"
          },
          {
            "name": "authorization_details",
            "in": "query",
            "required": false,
            "description": "Only for Holder Wallets.  OID authorisation details data model.\n\nNote: `authorization_details` must be a stringified JSON array.\n\nSee \"OID4VCI Authorisation Details\" schema for more information.\n",
            "schema": {
              "type": "string"
            },
            "example": "[{\"type\":\"openid_credential\",\"format\":\"jwt_vc\",\"locations\":[\"http://localhost:3000/conformance/v3/issuer\"],\"types\":[\"VerifiableCredential\",\"VerifiableAttestation\",\"CTWalletCrossInTime\"]}]"
          },
          {
            "name": "client_metadata",
            "in": "query",
            "required": false,
            "description": "Only for Holder Wallets. Client Metadata including a link to an `authorization_endpoint` (optional).\n\nNote: `client_metadata` must a stringified JSON object.\n\nSee \"Client Metadata\" schema for more information.\n",
            "schema": {
              "type": "string"
            },
            "example": "{\"authorization_endpoint\":\"openid:\"}"
          },
          {
            "name": "issuer_state",
            "in": "query",
            "required": false,
            "description": "REQUIRED if Credential Offering contained `issuer_state`.\n",
            "schema": {
              "type": "string"
            },
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6Ink2UTFUTWN4am4zU1ZDT0dNUm9mZHA0M1owU0tGMVROSTkwcG5CWldSZkkifQ.eyJjbGllbnRfaWQiOiJkaWQ6a2V5OnoyZG16RDgxY2dQeDhWa2k3SmJ1dU1tRllyV1BnWW95dHlrVVozZXlxaHQxajlLYnB0SnZwaHdHaXh6azJiM1l4ZnNxRzZwRFNYTFhia0g1Y01HYjhBZDFWSkp5ZWkxWWhEQjRDb2RNNW5DaDJxUGU4TFhNQVU2OWdjdTZmUmI2TExvYmQxRmZjOXdSQlU0NXBIWWNKUUVnamg4blZVdmR3NUhqWGgzNEJ3NUpQNzR0N1ciLCJjcmVkZW50aWFsX3R5cGVzIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVmVyaWZpYWJsZUF0dGVzdGF0aW9uIiwiQ1RXYWxsZXRDcm9zc0luVGltZSJdLCJpYXQiOjE2ODI0OTY3MTIsImV4cCI6MTY4MjQ5NzAxMiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDozMDAwL2NvbmZvcm1hbmNlL3YzL2lzc3Vlci1tb2NrIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDozMDAwL2NvbmZvcm1hbmNlL3YzL2F1dGgtbW9jayIsInN1YiI6ImRpZDprZXk6ejJkbXpEODFjZ1B4OFZraTdKYnV1TW1GWXJXUGdZb3l0eWtVWjNleXFodDFqOUticHRKdnBod0dpeHprMmIzWXhmc3FHNnBEU1hMWGJrSDVjTUdiOEFkMVZKSnllaTFZaERCNENvZE01bkNoMnFQZThMWE1BVTY5Z2N1NmZSYjZMTG9iZDFGZmM5d1JCVTQ1cEhZY0pRRWdqaDhuVlV2ZHc1SGpYaDM0Qnc1SlA3NHQ3VyJ9.QzNioxnUbdxhdnYoAzNiati7-Lg5Kkg0mEAf1OHRvXyjxn1Z-_kuvcVdOmIpsF_o55l4NMy2hmz5yLIFs9zVEA"
          },
          {
            "name": "code_challenge",
            "in": "query",
            "required": false,
            "description": "Only for Holder Wallets. In format of `BASE64URL-ENCODE(SHA256(code_verifier as UTF-8 string))`.\n\n`code_verifier` is client generated secure random, which will be used with token endpoint. It is between 43 and 128 characters long, and contains characters A-Z, a-z, 0-9, hyphen, period, underscore, and tilde. Please see [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1)\n",
            "schema": {
              "type": "string"
            },
            "example": "yKZeDTMFPu8YSwqdlIVkQBifcwmtUgnqzjP-hvV0qdI"
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "required": false,
            "description": "Only for Holder Wallets. MUST be \"S256\".\n",
            "schema": {
              "type": "string"
            },
            "example": "S256"
          }
        ],
        "responses": {
          "302": {
            "description": "Authorisation Server responds with one of the three responses:\n  - ID Token Request\n  - VP Token Request\n  - Error codes for authorization endpoint\n\nAll responses are in the \"Location\" header parameter and are x-www-form-urlencoded\n",
            "headers": {
              "Location": {
                "description": "x-www-form-urlencoded ID Token Request",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "URL"
                },
                "examples": {
                  "success": {
                    "summary": "Successful Request",
                    "value": "openid://?state=32f6e80d-bc60-4261-a1c0-c6fe0b15bd9f&client_id=https%3A%2F%2Fconformance-test.ebsi.eu%2Fconformance%2Fv3%2Fauth&redirect_uri=https%3A%2F%2Fconformance-test.ebsi.eu%2Fconformance%2Fv3%2Fauth%2Fdirect_post&response_type=id_token&response_mode=direct_post&scope=openid&nonce=8b4b9a89-2d0d-4b94-b975-3c93af758926&request=eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IkZMeEkzTE04bUZDRkNEMUg0VmpacVd0MVBmaWQyaThBQ1lpRHZFelo5VU0ifQ.eyJzdGF0ZSI6IjMyZjZlODBkLWJjNjAtNDI2MS1hMWMwLWM2ZmUwYjE1YmQ5ZiIsImNsaWVudF9pZCI6Imh0dHBzOi8vY29uZm9ybWFuY2UtdGVzdC5lYnNpLmV1L2NvbmZvcm1hbmNlL3YzL2F1dGgtbW9jayIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vY29uZm9ybWFuY2UtdGVzdC5lYnNpLmV1L2NvbmZvcm1hbmNlL3YzL2F1dGgtbW9jay9kaXJlY3RfcG9zdCIsInJlc3BvbnNlX3R5cGUiOiJpZF90b2tlbiIsInJlc3BvbnNlX21vZGUiOiJkaXJlY3RfcG9zdCIsInNjb3BlIjoib3BlbmlkIiwibm9uY2UiOiI4YjRiOWE4OS0yZDBkLTRiOTQtYjk3NS0zYzkzYWY3NTg5MjYiLCJpc3MiOiJodHRwczovL2NvbmZvcm1hbmNlLXRlc3QuZWJzaS5ldS9jb25mb3JtYW5jZS92My9hdXRoLW1vY2siLCJhdWQiOiJodHRwczovL215LWlzc3Vlci5ldS9zdWZmaXgveHl6In0.WwQFrOulUdXt2Yr-rqD-8xHCBd1EZRVM6KaVWWsZJGWh7mKmj6qDJrlGjWsJUcLYgF9AaetjOxubKeeQ4VA60Q"
                  },
                  "invalidRequest": {
                    "summary": "Invalid Request",
                    "value": "https://my-issuer.eu/suffix/xyz/code-cb?error=invalid_request&error_description=%5Binvalid_literal%5D+in+%27request.authorization_details.0.type%27%3A+Invalid+literal+value%2C+expected+%22openid_credential%22%0A%5Binvalid_literal%5D+in+%27request.authorization_details.0.format%27%3A+Invalid+literal+value%2C+expected+%22jwt_vc%22%0A%5Bcustom%5D+in+%27request.authorization_details.0.types%27%3A+Array+must+include+VerifiableCredential%2C+VerifiableAttestation&state=32f6e80d-bc60-4261-a1c0-c6fe0b15bd9f"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Authorisation Endpoint Error\n",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "invalidRedirectURI": {
                    "value": {
                      "detail": "[\"redirect_uri must be a URL address\"]",
                      "status": 400,
                      "title": "Bad Request",
                      "type": "about:blank"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "title": "Internal Server Error",
                      "status": 500,
                      "detail": "The server encountered an internal error and was unable to complete your request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/auth/request_uri/{requestId}": {
      "get": {
        "operationId": "get-request_uri",
        "tags": [
          "Auth Server"
        ],
        "summary": "Request by reference",
        "description": "Authorisation Server's endpoint that returns a [Request Object](https://openid.net/specs/openid-connect-core-1_0.html#UseRequestUri).\nrequest_uri SHOULD be used whenever the request object is large.\n",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Unique Request ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "tokenRequestID": {
                "summary": "Request ID",
                "value": "2160d1e4-2243-48cc-ae90-169e3d206502"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/jwt": {
                "schema": {
                  "title": "Request",
                  "description": "Authorisation Request Object - The Request Object must be signed with the client's (Credential Issuer) private keys, owned by the requesting client_id. The used private key's public key must be discoverable through client's openid-configuration through jwks_uri parameter.\n\nThe Authorisation Request Object MUST be a valid JWS.\n\nSee the Authorisation Request Object schema.\n",
                  "type": "string",
                  "format": "^(([A-Za-z0-9\\-_])+\\.)([A-Za-z0-9\\-_]+)(\\.([A-Za-z0-9\\-_]+))?$",
                  "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IkZMeEkzTE04bUZDRkNEMUg0VmpacVd0MVBmaWQyaThBQ1lpRHZFelo5VU0ifQ.eyJzdGF0ZSI6IjIyYmQxM2FiLTM1NjYtNDM1MS04MDBiLWExNGM1Y2Q3ZjE3NiIsImNsaWVudF9pZCI6Imh0dHBzOi8vY29uZm9ybWFuY2UtdGVzdC5lYnNpLmV1L2NvbmZvcm1hbmNlL3YzL2F1dGgtbW9jayIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vY29uZm9ybWFuY2UtdGVzdC5lYnNpLmV1L2NvbmZvcm1hbmNlL3YzL2F1dGgtbW9jay9kaXJlY3RfcG9zdCIsInJlc3BvbnNlX3R5cGUiOiJpZF90b2tlbiIsInJlc3BvbnNlX21vZGUiOiJkaXJlY3RfcG9zdCIsInNjb3BlIjoib3BlbmlkIiwibm9uY2UiOiIyMjgwMGEyMS0zNGNhLTQ5Y2MtYTNhMS00ODRjNzdhNzhiZTAiLCJpc3MiOiJodHRwczovL2NvbmZvcm1hbmNlLXRlc3QuZWJzaS5ldS9jb25mb3JtYW5jZS92My9hdXRoLW1vY2siLCJhdWQiOiJodHRwczovL215LWlzc3Vlci5ldS9zdWZmaXgveHl6In0.9cWdEYiZNGLO0pmSwnYCvMfECGkV7egVRqG4LMgBO7y1wKVz23QmrPOR_QbpxVA-IjkbSqWdXeTuVsNSSGlAlw\n"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "invalidState": {
                    "value": {
                      "detail": "[\"requestId must be a UUID\"]",
                      "status": 400,
                      "title": "Bad Request",
                      "type": "about:blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Request Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "invalidState": {
                    "value": {
                      "detail": "No Authorization Request found with the ID {requestId}",
                      "status": 404,
                      "title": "Not Found",
                      "type": "about:blank"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "title": "Internal Server Error",
                      "status": 500,
                      "detail": "The server encountered an internal error and was unable to complete your request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/auth/direct_post": {
      "post": {
        "operationId": "post-direct_post",
        "tags": [
          "Auth Server"
        ],
        "summary": "Direct Post",
        "description": "Authorisation Server's endpoint that accepts and processes the ID Token issued by the client. The ID Token is self-issued by the client and it MUST be signed with client's DID document's authentication key.\n\nSee the ID Token - Direct POST response schema.\n",
        "requestBody": {
          "content": {
            "x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "description": "Self-issued ID Token and signed with DID Authentication key or VP Token. The signed ID Token or VP Token is submitted as compact serialised JWS.\n",
                "required": [
                  "state"
                ],
                "properties": {
                  "id_token": {
                    "description": "ID Token. Required when the Authorisation Server requests an ID Token.",
                    "type": "string",
                    "format": "^(([A-Za-z0-9\\-_])+\\.)([A-Za-z0-9\\-_]+)(\\.([A-Za-z0-9\\-_]+))?$",
                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImRpZDplYnNpOnpybk1TNkJXZHB6UTdtelk0RXdmVFZmIn0.eyJub25jZSI6IjBhMjMwM2VhLTlkNTctNDRiMC04NjU3LTAyYjBkMDkyZjg3MyIsInN1YiI6Imh0dHBzOi8vbXktaXNzdWVyLmV1L3N1ZmZpeC94eXoiLCJpc3MiOiJodHRwczovL215LWlzc3Vlci5ldS9zdWZmaXgveHl6IiwiYXVkIjoiaHR0cHM6Ly9jb25mb3JtYW5jZS10ZXN0LmVic2kuZXUvY29uZm9ybWFuY2UvdjMvYXV0aC1tb2NrIiwiaWF0IjoxNjc2NjQxNzE5LCJleHAiOjE2NzY2NDIwMTl9.N3tAGPBZ-hFkzF-c8Gr6C-YVgvrjbfwqU4iVnQJtCPcq4qioUnr-I9flwubJJYHfbqkC1MoaYGOq5X69kL69nQ"
                  },
                  "vp_token": {
                    "description": "VP Token. Required when the Authorisation Server requests an VP Token.",
                    "type": "string",
                    "format": "^(([A-Za-z0-9\\-_])+\\.)([A-Za-z0-9\\-_]+)(\\.([A-Za-z0-9\\-_]+))?$"
                  },
                  "presentation_submission": {
                    "description": "Stringified presentation submission object. Required when the Authorisation Server requests an VP Token.",
                    "type": "string"
                  },
                  "state": {
                    "type": "string",
                    "example": "8379a190-e437-49f8-8585-a9aa55815c5"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "302": {
            "description": "OK",
            "headers": {
              "Location": {
                "description": "x-www-form-urlencoded Authentication Response. It MUST contain a valid `code` and `state`. The `state` claim MUST have the same value as the `state` in the Authorisation Request.\n\nSee Authentication Response schema definition.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Authorisation Endpoint Error\n",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "invalidState": {
                    "value": {
                      "detail": "No Authentication Request bound to state ${state} found",
                      "status": 400,
                      "title": "Bad Request",
                      "type": "about:blank"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "title": "Internal Server Error",
                      "status": 500,
                      "detail": "The server encountered an internal error and was unable to complete your request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/auth/token": {
      "post": {
        "operationId": "post-token",
        "tags": [
          "Auth Server"
        ],
        "summary": "Token endpoint",
        "description": "The client proceeds with the code flow, and calls the Token Endpoint with the required details and signs client_assertion JWT with client's private keys, which public key counterparts are resolvable through jwks_uri or is in the Client Metadata shared in the pre-registration step.\n",
        "requestBody": {
          "content": {
            "x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/token_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/access_token_response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Bad Request": {
                    "value": {
                      "title": "Bad Request",
                      "status": 400,
                      "detail": "Bad request."
                    }
                  },
                  "Token Expired": {
                    "value": {
                      "title": "Token Expired",
                      "status": 400,
                      "detail": "The token has expired."
                    }
                  },
                  "Issuer Not Found": {
                    "value": {
                      "title": "Issuer Not Found",
                      "status": 400,
                      "detail": "Issuer not found in the trusted apps registry."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Unauthorised": {
                    "value": {
                      "title": "Unauthorized",
                      "status": 401,
                      "detail": "You are not authorized to access the resources."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/paths/~1v3~1auth~1jwks/get/responses/500"
          }
        }
      }
    },
    "/v3/tnt/.well-known/openid-credential-issuer": {
      "get": {
        "operationId": "get-openid-credential-issuer",
        "tags": [
          "Issuer Server"
        ],
        "summary": "Credential Issuer discovery metadata",
        "description": "Client or a wallet must obtain the Credential Issuer metadata prior to the transaction using strategies described in [OAuth 2.0 Authorization Server Metadata](https://www.rfc-editor.org/info/rfc8414) or out-of-band.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/openid-credential-issuer"
                },
                "examples": {
                  "ebsiAuthoriseAndAccredit": {
                    "summary": "Profile: EBSI Authorise and Accredit\n",
                    "value": {
                      "authorization_server": "https://api-conformance.ebsi.eu/conformance/v3/auth",
                      "credential_issuer": "https://api-conformance.ebsi.eu/conformance/v3/issuer",
                      "credential_endpoint": "https://api-conformance.ebsi.eu/conformance/v3/tnt/credential",
                      "deferred_credential_endpoint": "https://api-conformance.ebsi.eu/conformance/v3/tnt/credential_deferred",
                      "credentials_supported": [
                        {
                          "format": "jwt_vc",
                          "types": [
                            "VerifiableCredential",
                            "VerifiableAttestation",
                            "VerifiableAuthorisationToOnboard"
                          ],
                          "trust_framework": {
                            "name": "ebsi",
                            "type": "Accreditation",
                            "uri": "TIR link towards accreditation"
                          },
                          "display": [
                            {
                              "name": "Verifiable Authorisation to onboard",
                              "locale": "en-GB"
                            }
                          ]
                        },
                        {
                          "format": "jwt_vc",
                          "types": [
                            "VerifiableCredential",
                            "VerifiableAttestation",
                            "VerifiableAccreditation",
                            "VerifiableAccreditationToAttest"
                          ],
                          "trust_framework": {
                            "name": "ebsi",
                            "type": "Accreditation",
                            "uri": "TIR link towards accreditation"
                          },
                          "display": [
                            {
                              "name": "Verifiable Accreditation to attest",
                              "locale": "en-GB"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "example": {
                  "type": "about:blank",
                  "title": "Internal Server Error",
                  "status": 500,
                  "detail": "Connection timeout\n"
                }
              }
            }
          }
        }
      }
    },
    "/v3/tnt/credential": {
      "post": {
        "operationId": "post-credential",
        "tags": [
          "Issuer Server"
        ],
        "summary": "Credential endpoint",
        "description": "The client proceeds with the code flow, and calls the Token Endpoint with the required details and signs client_assertion JWT with client's private keys, which public key counterparts are resolvable through jwks_uri or is in the Client Metadata shared in the pre-registration step.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/credential_request"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credential_response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response constructed by the Credential Issuer when the Credential Request\nis invalid.\n",
                  "properties": {
                    "error": {
                      "description": "The error code, if something went wrong.",
                      "type": "string"
                    },
                    "error_description": {
                      "description": "Additional error information (if any).",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response constructed by the Credential Issuer when the Credential Request\nis unauthorised.\n",
                  "properties": {
                    "error": {
                      "description": "The error code, if something went wrong.",
                      "type": "string"
                    },
                    "error_description": {
                      "description": "Additional error information (if any).",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "title": "Internal Server Error",
                      "status": 500,
                      "detail": "The server encountered an internal error and was unable to complete your request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/tnt/credential_deferred": {
      "post": {
        "operationId": "post-credential-deferred",
        "tags": [
          "Issuer Server"
        ],
        "summary": "Deferred credential endpoint",
        "description": "If the `/credential` endpoint returned an `acceptance_token` paramater, the client can call\nthe `/credential_deferred` endpoint in order to receive the requested credential.\nThe `acceptance_token` parameter MUST be sent as Access Token in the HTTP header.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "**Warning!** Although the request sample shows a `Content-Type: text/plain` header, **the actual request MUST NOT contain any `Content-Type` header**, as the request body is empty.\n",
          "content": {
            "text/plain": {}
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deferred_credential_response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response constructed by the Credential Issuer when the Credential Request\nis invalid.\n",
                  "properties": {
                    "error": {
                      "description": "The error code, if something went wrong.",
                      "type": "string"
                    },
                    "error_description": {
                      "description": "Additional error information (if any).",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "title": "Internal Server Error",
                      "status": 500,
                      "detail": "The server encountered an internal error and was unable to complete your request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/tnt/offers/{credentialOfferId}": {
      "get": {
        "operationId": "get-credential-offer",
        "tags": [
          "Issuer Server"
        ],
        "summary": "Credential Offer by reference",
        "description": "Issuer Server's endpoint that returns a [Credential Offer](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-11.html#section-4.1.3).\ncredential_offer_uri SHOULD be used whenever the credential_offer object is large.\n",
        "parameters": [
          {
            "name": "credentialOfferId",
            "in": "path",
            "description": "Unique Credential Offer ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "credentialOfferId": {
                "summary": "Credential Offer ID",
                "value": "2160d1e4-2243-48cc-ae90-169e3d206502"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Credential Offer",
                  "description": "Credential Offer Object. See https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-11.html#section-4.1.1 for more information.\n",
                  "type": "object",
                  "required": [
                    "credential_issuer",
                    "credentials"
                  ],
                  "properties": {
                    "credential_issuer": {
                      "description": "The URL of the Credential Issuer, the Wallet is requested to obtain one or more Credentials from.",
                      "type": "string",
                      "format": "URI",
                      "example": "https://credential-issuer.example.com"
                    },
                    "credentials": {
                      "description": "A JSON array, where every entry is a JSON object or a JSON string. If the entry is an object, the\nobject contains the data related to a certain credential type the Wallet MAY request. Each object\nMUST contain a `format` Claim determining the format of the credential to be requested and further\nparameters characterising the type of the credential to be requested. If the entry is a string,\nthe string value MUST be one of the id values in one of the objects in the credentials_supported\nCredential Issuer metadata parameter. When processing, the Wallet MUST resolve this string value\nto the respective object.\n",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "UniversityDegree_JWT",
                        {
                          "format": "mso_mdoc",
                          "doctype": "org.iso.18013.5.1.mDL"
                        }
                      ]
                    },
                    "grants": {
                      "description": "A JSON object indicating to the Wallet the Grant Types the Credential Issuer's AS is prepared to\nprocess for this credential offer. Every grant is represented by a key and an object. The key\nvalue is the Grant Type identifier, the object MAY contain parameters either determining the way\nthe Wallet MUST use the particular grant and/or parameters the Wallet MUST send with the respective\nrequest(s). If grants is not present or empty, the Wallet MUST determine the Grant Types the\nCredential Issuer's AS supports using the respective metadata. When multiple grants are present,\nit's at the Wallet's discretion which one to use.\n",
                      "type": "object",
                      "properties": {
                        "authorization_code": {
                          "description": "Grant Type `authorization_code`",
                          "type": "object",
                          "properties": {
                            "issuer_state": {
                              "description": "String value created by the Credential Issuer and opaque to the Wallet that is used to\nbind the subsequent Authorization Request with the Credential Issuer to a context set up\nduring previous steps. If the Wallet decides to use the Authorization Code Flow and\nreceived a value for this parameter, it MUST include it in the subsequent Authorization\nRequest to the Credential Issuer as the `issuer_state` parameter value.\n",
                              "type": "string"
                            }
                          }
                        },
                        "urn:ietf:params:oauth:grant-type:pre-authorized_code": {
                          "description": "Grant Type `urn:ietf:params:oauth:grant-type:pre-authorized_code`",
                          "type": "object",
                          "required": [
                            "pre-authorized_code"
                          ],
                          "properties": {
                            "pre-authorized_code": {
                              "description": "The code representing the Credential Issuer's authorization for the Wallet to obtain\nCredentials of a certain type. This code MUST be short lived and single-use. If the\nWallet decides to use the Pre-Authorized Code Flow, this parameter value MUST be include\nin the subsequent Token Request with the Pre-Authorized Code Flow.\n",
                              "type": "string"
                            },
                            "user_pin_required": {
                              "description": "Boolean value specifying whether the Credential Issuer expects presentation of a user PIN\nalong with the Token Request in a Pre-Authorized Code Flow. Default is false. This PIN is\nintended to bind the Pre-Authorized Code to a certain transaction in order to prevent\nreplay of this code by an attacker that, for example, scanned the QR code while standing\nbehind the legit user. It is RECOMMENDED to send a PIN via a separate channel. If the\nWallet decides to use the Pre-Authorized Code Flow, a PIN value MUST be sent in the\n`user_pin` parameter with the respective Token Request.\n",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "invalidState": {
                    "value": {
                      "detail": "[\"credentialOfferId must be a UUID\"]",
                      "status": 400,
                      "title": "Bad Request",
                      "type": "about:blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Credential Offer Not Found",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "invalidState": {
                    "value": {
                      "detail": "No Credential Offer found with the ID {credentialOfferId}",
                      "status": 404,
                      "title": "Not Found",
                      "type": "about:blank"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/problem"
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "title": "Internal Server Error",
                      "status": 500,
                      "detail": "The server encountered an internal error and was unable to complete your request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "credential_request": {
        "title": "Credential Request",
        "description": "A client presents the credential request when she is requesting a credential.\n",
        "type": "object",
        "required": [
          "format",
          "types",
          "proof"
        ],
        "properties": {
          "format": {
            "description": "REQUIRED. Format in which the VCs should be issued.\nIt MUST be jwt_vc.\nIf not specified, the issuer default format is used.\n",
            "type": "string",
            "enum": [
              "jwt_vc"
            ]
          },
          "types": {
            "description": "Type to the credential being requested.\n\nThe value MUST match the 'types' property in the request.\n",
            "type": "array",
            "items": {
              "description": "A valid VC type (within the given framework)",
              "type": "string"
            }
          },
          "proof": {
            "type": "object",
            "required": [
              "type",
              "verificationMethod",
              "jws"
            ],
            "properties": {
              "proof_type": {
                "description": "JSON string denoting proof type.\n\nMUST be jwt\n",
                "type": "string",
                "enum": [
                  "jwt"
                ]
              },
              "jwt": {
                "description": "A signature performed by a key that can be obtained by an identifier in verificationMethod.\n\nMUST be JWS. See Proof Object schema.\n",
                "type": "string",
                "format": "JWS"
              }
            }
          }
        }
      },
      "credential_response": {
        "title": "Credential Response",
        "description": "Response that returns a Verifiable Credential in the requested format.\n",
        "type": "object",
        "properties": {
          "format": {
            "description": "JSON string denoting the credential format. It MUST be jwt_vc\n",
            "type": "string",
            "enum": [
              "jwt_vc"
            ],
            "example": "jwt_vc"
          },
          "credential": {
            "description": "The value of the credential claim in the Credential Response MUST be a JSON string.\nCredentials of this format are already a sequence of base64url-encoded values separated\nby period characters and MUST NOT be re-encoded.\nMUST be present when acceptance_token is not returned.\n",
            "type": "string"
          },
          "acceptance_token": {
            "description": "A JSON string containing a security token subsequently used to obtain a Credential.\nMUST be present when credential is not returned.\n",
            "type": "string"
          }
        }
      },
      "deferred_credential_response": {
        "title": "Deferred credential Response",
        "description": "Response that returns a Verifiable Credential in the requested format.\n",
        "type": "object",
        "required": [
          "credential",
          "format"
        ],
        "properties": {
          "format": {
            "description": "JSON string denoting the credential format. It MUST be jwt_vc\n",
            "type": "string",
            "enum": [
              "jwt_vc"
            ],
            "example": "jwt_vc"
          },
          "credential": {
            "description": "The value of the credential claim in the Credential Response MUST be a JSON string.\nCredentials of this format are already a sequence of base64url-encoded values separated\nby period characters and MUST NOT be re-encoded.\n",
            "type": "string"
          }
        }
      },
      "proof_object": {
        "title": "Proof Object",
        "type": "object",
        "properties": {
          "header": {
            "description": "JWT Header",
            "type": "object",
            "required": [
              "typ",
              "alg",
              "kid"
            ],
            "properties": {
              "typ": {
                "description": "Payload type",
                "type": "string",
                "enum": [
                  "openid4vci-proof+jwt"
                ]
              },
              "alg": {
                "description": "Signing Algorithm. ES256 algorithm MUST be supported, other algorithms may be supported.\n",
                "type": "string",
                "enum": [
                  "ES256",
                  "ES256K",
                  "RS256",
                  "EdDSA"
                ]
              },
              "kid": {
                "description": "Signing Key Identifier. It MUST be a valid EBSI-compliant DID.\n",
                "type": "string",
                "format": "URI"
              }
            }
          },
          "payload": {
            "description": "JWT Payload",
            "type": "object",
            "required": [
              "iss",
              "aud",
              "iat",
              "nonce"
            ],
            "properties": {
              "iss": {
                "title": "JWT Issuer",
                "description": "The \"iss\" (issuer) claim identifies the actor who issued the JWT. iss MUST be the client_id of the client.\n",
                "type": "string",
                "format": "URL",
                "example": "https://my-issuer.eu/suffix/xyz"
              },
              "aud": {
                "title": "JWT Audience (the recipient)",
                "description": "The \"aud\" (audience) claim identifies the recipients that the JWT is intended for. The value MUST be Issuer Server's id.\n",
                "type": "string",
                "format": "URL",
                "example": "https://api-conformance.ebsi.eu/conformance/v3/issuer"
              },
              "iat": {
                "title": "JWT Issuance Time",
                "description": "Time at which the JWT was issued.\n",
                "type": "number",
                "format": "uint",
                "example": 1675268413
              },
              "nonce": {
                "title": "Nonce",
                "description": "The value type of this claim MUST be a string, where the value is a c_nonce provided by Auth Server.\n",
                "type": "string"
              }
            }
          }
        }
      },
      "client_assertion_object": {
        "title": "Client Assertion Object",
        "description": "Client Assertion JWT",
        "type": "object",
        "properties": {
          "header": {
            "description": "JWT Header",
            "type": "object",
            "required": [
              "typ",
              "alg",
              "kid"
            ],
            "properties": {
              "typ": {
                "description": "Payload type",
                "type": "string",
                "enum": [
                  "JWT"
                ]
              },
              "alg": {
                "description": "Signing Algorithm. ES256 algorithm MUST be supported, other algorithms may be supported.\n",
                "type": "string",
                "enum": [
                  "ES256",
                  "ES256K",
                  "RS256",
                  "EdDSA"
                ]
              },
              "kid": {
                "description": "Signing Key Identifier. It MUST be a valid EBSI-compliant DID. If the DID is not registered in EBSI?\n",
                "type": "string",
                "format": "URI"
              }
            }
          },
          "payload": {
            "description": "JWT Payload",
            "type": "object",
            "required": [
              "iss",
              "sub",
              "aud",
              "iat",
              "exp",
              "jti"
            ],
            "properties": {
              "iss": {
                "title": "JWT Issuer",
                "description": "The \"iss\" (issuer) claim identifies the actor who issued the JWT. iss MUST be the client_id of the client.\n",
                "type": "string",
                "format": "URL",
                "example": "https://my-issuer.eu/suffix/xyz\""
              },
              "sub": {
                "title": "JWT Subject",
                "description": "Identifier that identifies the user the ID Token is about. Value MUST be the client_id and must match the iss claim.\n",
                "type": "string",
                "format": "URL",
                "example": "https://my-issuer.eu/suffix/xyz\""
              },
              "aud": {
                "title": "JWT Audience (the recipient)",
                "description": "The \"aud\" (audience) claim identifies the recipients that the JWT is intended for. The value MUST be Authorisation Server's id - the issuer claim in the openid-configuration of the Authorisation Server.\n",
                "type": "string",
                "format": "URL",
                "example": "https://api-conformance.ebsi.eu/conformance/v3/auth"
              },
              "iat": {
                "title": "JWT Issuance Time",
                "description": "Time at which the JWT was issued.\n",
                "type": "number",
                "format": "uint",
                "example": 1675268413
              },
              "exp": {
                "title": "JWT Expiration Time",
                "description": "The \"exp\" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing. The processing of the \"exp\" claim requires that the current date/time MUST be before the expiration date/time listed in the \"exp\" claim.\n",
                "type": "number",
                "format": "uint",
                "example": 1675268413
              },
              "jti": {
                "title": "JWT ID",
                "description": "The \"jti\" (JWT ID) claim provides a unique identifier for the JWT. The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object; if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well. The \"jti\" claim can be used to prevent the JWT from being replayed. The \"jti\" value is a case- sensitive string.\n",
                "type": "string",
                "example": "f508f17d-8bdb-4c0f-b64e-250253382175"
              }
            }
          }
        }
      },
      "problem": {
        "title": "Problem Details",
        "description": "A Problem Details object (RFC 7807)",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "format": "uri",
            "description": "An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide\nhuman-readable documentation for the problem type.\n",
            "default": "about:blank"
          },
          "title": {
            "type": "string",
            "description": "A short summary of the problem type.",
            "example": "Internal Server Error"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "The HTTP status code generated by the origin server for this occurrence of the problem.\n",
            "minimum": 400,
            "maximum": 600,
            "example": 500
          },
          "detail": {
            "type": "string",
            "description": "A human readable explanation specific to this occurrence of the problem.\n",
            "example": "Connection timeout"
          },
          "instance": {
            "type": "string",
            "format": "uri",
            "description": "An absolute URI that identifies the specific occurrence of the problem. It may or may\nnot yield further information if dereferenced.\n"
          }
        }
      },
      "authentication_response": {
        "title": "Authentication Response",
        "description": "OIDC Authentication Response",
        "type": "object",
        "properties": {
          "code": {
            "description": "An opaque value that can be used to redeem tokens from the token endpoint.\ncode is returned if the response_type includes code. The code has a\nlifetime of 300 seconds.\n",
            "type": "string"
          },
          "state": {
            "description": "The unmodified state value from the Authentication Request.\n",
            "type": "string"
          },
          "error": {
            "description": "The error code, if something went wrong.",
            "type": "string"
          },
          "error_description": {
            "description": "Additional error information (if any).",
            "type": "string"
          }
        }
      },
      "openid-configuration": {
        "title": "Authorisation Server Metadata",
        "description": "This is EBSI's Conformance Testing minimal profile of the OIDC Authorisation Server metadata. It builds on the following specifications:\n- [OIDC - Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n- [OAuth 2.0 Pushed Authorization Requests](https://www.rfc-editor.org/rfc/rfc9126.html)\n- [SIOPv2 - Provider Metadata](https://openid.net/specs/openid-connect-self-issued-v2-1_0.html#name-self-issued-openid-provider-)\n- [OID4VP - Authorisation Server Metadata](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-authorization-server-metada)\n",
        "type": "object",
        "required": [
          "issuer",
          "authorization_endpoint",
          "token_endpoint",
          "jwks_uri",
          "scopes_supported",
          "response_types_supported",
          "subject_types_supported",
          "id_token_signing_alg_values_supported"
        ],
        "properties": {
          "issuer": {
            "title": "Issuer",
            "description": "REQUIRED. URL using the https scheme with no query or fragment component that the OP asserts as its Issuer Identifier. MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.\n\nNote: issuer refers to OpenID Connect issuer or the Authorization Server and not to the Verifiable Credential issuer.\n\nRef: [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n",
            "type": "string",
            "format": "URI",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth"
          },
          "authorization_endpoint": {
            "title": "Authorization Endpoint",
            "description": "REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint [OpenID.Core].\n\nRef: [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n",
            "type": "string",
            "format": "URI",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth/authorize"
          },
          "token_endpoint": {
            "title": "Token Endpoint",
            "description": "CONDITIONAL. URL of the OP's OAuth 2.0 Token Endpoint.\n\nNote: This endpoint is REQUIRED unless implicit flow is used.\n\nRef: [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n",
            "type": "string",
            "format": "URI",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth/token"
          },
          "presentation_definition_endpoint": {
            "title": "Presentation Definition Endpoint",
            "description": "OPTIONAL. URL of the OP's presentation definition endpoint.\n\nNon-standard (yet). Used in EBSI.\n",
            "type": "string",
            "format": "URI",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth/presentation_definitions"
          },
          "jwks_uri": {
            "title": "JWKS URI",
            "description": "REQUIRED. URL of the authorization server's JWK Set [JWK] document. The referenced document contains the signing key(s) the client uses to validate signatures from the authorization server. This URL MUST use the \"https\" scheme. The JWK Set MAY also contain the server's encryption key(s), which are used by clients to encrypt requests to the server. When both signing and encryption keys are made available, a \\\"use\\\" (public key use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.\n\nRef: [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n",
            "type": "string",
            "format": "URI",
            "example": "https://sample.com/oxauth/restv1/jwks"
          },
          "scopes_supported": {
            "title": "Supported Scopes",
            "description": "REQUIRED (by SIOP v2). JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used, although those defined in [OpenID.Core] SHOULD be listed, if supported.\n\nMUST contain 'openid'\n\nRef:\n- [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n- [SIOPv2](https://openid.net/specs/openid-connect-self-issued-v2-1_0.html#name-self-issued-openid-provider-)\n",
            "type": "array",
            "items": {
              "description": "A list of openid scope values",
              "type": "string"
            },
            "example": [
              "openid"
            ]
          },
          "response_types_supported": {
            "title": "Supported Response Types",
            "description": "REQUIRED (by SIOP v2). JSON array containing a list of the OAuth 2.0 \\\"response_type\\\" values that this authorization server supports. The array values used are the same as those used with the \\\"response_types\\\" parameter defined by \\\"OAuth 2.0 Dynamic Client Registration Protocol\\\" [RFC7591].\n\nIf SIOP v2 is used: MUST be id_token\n\nRef:\n- [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n- [SIOPv2](https://openid.net/specs/openid-connect-self-issued-v2-1_0.html#name-self-issued-openid-provider-)\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "id_token",
              "vp_token"
            ]
          },
          "response_mode_supported": {
            "title": "Supported Response Modes",
            "description": "OPTIONAL. JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports, as specified in OAuth 2.0 Multiple Response Type Encoding Practices [OAuth.Responses]. If omitted, the default for Dynamic OpenID Providers is [\"query\", \"fragment\"].\n\nMUST be 'query'\n\nRef:\n- [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "query",
              "fragment"
            ]
          },
          "grant_types_supported": {
            "title": "Supported Grant Types",
            "description": "JSON array containing a list of the OAuth 2.0 grant type values that this authorization server supports. The array values used are the same as those used with the \\\"grant_types\\\" parameter defined by \\\"OAuth 2.0 Dynamic Client Registration Protocol\\\" [RFC7591]. If omitted, the default value is \\\"[\\\"authorization_code\\\", \\\"implicit\\\"]\\\".\n\nRef:\n- [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "authorization_code",
              "implicit",
              "client_credentials"
            ]
          },
          "subject_types_supported": {
            "title": "Supported Subject Types",
            "description": "REQUIRED. JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.\n\nMUST be ['public']\n\nRef:\n- [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "public"
            ]
          },
          "id_token_signing_alg_values_supported": {
            "title": "ID Token Signing Algorithms",
            "description": "REQUIRED. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT].\n\nThe algorithm ES256 MUST be included.\nRef:\n- [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n- [SIOPv2](https://openid.net/specs/openid-connect-self-issued-v2-1_0.html)\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ES256"
            ]
          },
          "request_object_signing_alg_values_supported": {
            "title": "Request Object Signing Algorithms",
            "description": "OPTIONAL. JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).\n\nServers MUST support none and ES256.\n\nRef:\n- [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n- [SIOPv2](https://openid.net/specs/openid-connect-self-issued-v2-1_0.html)\n",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "ES256",
                "RS256",
                "ES256K",
                "EdDSA"
              ]
            }
          },
          "request_parameter_supported": {
            "title": "Supported Request Parameters",
            "description": "OPTIONAL. Boolean value specifying whether the OP supports use of the request parameter, with true indicating support. If omitted, the default value is false.\n\nEBSI: MUST be true\n\nRef:\n- [OIDC](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n",
            "type": "boolean",
            "example": true
          },
          "token_endpoint_auth_methods_supported": {
            "title": "Token Endpoint Auth Methods",
            "description": "JSON array containing a list of client authentication methods supported by this token endpoint\n\nMUST contain 'private_key_jwt'\n",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "private_key_jwt"
              ]
            }
          },
          "request_uri_parameter_supported": {
            "title": "Request URI Parameter",
            "description": "OPTIONAL. Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support. If omitted, the default value is true.\n",
            "type": "boolean",
            "example": true
          },
          "request_authentication_methods_supported": {
            "title": "Request Authentication Methods",
            "description": "OPTIONAL. A JSON Object defining the client authentications supported for each endpoint. The endpoint names are defined in the IANA \"OAuth Authorization Server Metadata\" registry [IANA.OAuth.Parameters]. Other endpoints and authentication methods are possible if made recognizable according to established standards and not in conflict with the operating principles of this specification. In OpenID Connect Core, no client authentication is performed at the authentication endpoint. Instead, because the request itself is authenticated. What it amounts to is that the OP maps information in the request (like the redirect_uri) to information it has gained on the client through static or dynamic registration. If the map is successful, the request can be processed. If the RP uses Automatic Registration, as defined in Section 10.1, the OP has no prior knowledge of the RP. Therefore, the OP must start by gathering information about the RP using the process outlined in Section 6. Once it has the RP's metadata, the OP can verify the request in the same way as if it had known the RP's metadata beforehand. To make the request verification more secure, we demand the use of a client authentication or verification method that proves that the RP is in possession of a key that appears in the RP's metadata.\n\nReference: <https://openid.net/specs/openid-connect-federation-1_0.html#name-op-metadata>\n",
            "type": "object",
            "properties": {
              "authorization_endpoint": {
                "description": "MUST be present. The value MUST be 'request_object'\n",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "request_object"
                  ]
                }
              }
            }
          },
          "vp_formats_supported": {
            "title": "Supported VP Formats",
            "description": "REQUIRED. An object containing a list of key value pairs, where the key is a string identifying a credential format supported by the AS. Valid credential format identifiers values are defined in Annex E of [OpenID.VCI]. Other values may be used when defined in the profiles of this specification.\n",
            "type": "object",
            "properties": {
              "jwt_vp": {
                "title": "JWC VP",
                "type": "object",
                "properties": {
                  "alg_values_supported": {
                    "description": "An object where the value is an array of case sensitive strings that identify the cryptographic suites that are supported. Cryptosuites for Verifiable Presentations.\n\nMUST contain ES256\n",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ES256"
                      ]
                    }
                  }
                }
              },
              "jwt_vc": {
                "title": "JWC VC",
                "type": "object",
                "properties": {
                  "alg_values_supported": {
                    "description": "An object where the value is an array of case sensitive strings that identify the cryptographic suites that are supported. Cryptosuites for Verifiable Credentials in jwt_vc_json, json_vc_json-ld, jwt_vp_json, json_vp_json-ld formats should use algorithm names defined in IANA JOSE Algorithms Registry. Cryptosuites for Verifiable Credentials in ldp_vc and ldp_vp format should use signature suites names defined in Linked Data Cryptographic Suite Registry. Cryptosuites for Verifiable Credentials in mso_mdoc format should use signature suites names defined in ISO/IEC 18013-5:2021. Parties using other credential formats will need to agree upon the meanings of the values used, which may be context-specific.\n\nMUST contain ES256\n",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ES256"
                      ]
                    }
                  }
                }
              }
            }
          },
          "subject_syntax_types_supported": {
            "title": "Supported Subject Syntax Types",
            "description": "REQUIRED. A JSON array of strings representing URI scheme identifiers and optionally\nmethod names of supported Subject Syntax Types. When Subject Syntax Type is JWK\nThumbprint, valid value is `urn:ietf:params:oauth:jwk-thumbprint` defined in RFC9278.\nWhen Subject Syntax Type is Decentralized Identifier, valid values MUST be a `did:`\nprefix followed by a supported DID method without a `:` suffix. For example, support\nfor the DID method with a method-name \"example\" would be represented by `did:example`.\n\nReference: https://openid.net/specs/openid-connect-self-issued-v2-1_0.html\n\nMUST contain: did:ebsi, did:key\n",
            "type": "array",
            "items": {
              "type": "string",
              "format": "URI"
            },
            "example": [
              "did:ebsi",
              "did:key"
            ]
          },
          "subject_syntax_types_discriminations": {
            "title": "Discriminations of Subject Syntax Types",
            "description": "Specific to EBSI.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "URI"
            },
            "example": [
              "did:key:jwk_jcs-pub",
              "did:ebsi:v1"
            ]
          },
          "subject_trust_frameworks_supported": {
            "title": "Supported Trust Frameworks",
            "description": "REQUIRED. A JSON array of supported trust frameworks.\n\nMUST contain: 'ebsi'\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ebsi"
            ]
          },
          "id_token_types_supported": {
            "title": "Supported ID Token types",
            "description": "OPTIONAL. A JSON array of strings containing the list of ID Token types supported by the OP, the default value is attester_signed_id_token. The ID Token types defined in this specification are:\n  subject_signed_id_token: Self-Issued ID Token, i.e. the id token is signed with key material under the end-user's control.\n\n  attester_signed_id_token: the id token is issued by the party operating the OP, i.e. this is the classical id token as defined in [OpenID.Core].\n\n  MUST be subject_signed_id_token\n",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "subject_signed_id_token",
                "attester_signed_id_token"
              ]
            }
          }
        }
      },
      "openid-credential-issuer": {
        "title": "Credential Issuer Metadata",
        "description": "This is EBSI's Conformance Testing minimal credential issuer dataset.\nIt builds on the following specifications:\n\n- [OID4VCI](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html)\n\nCredential Issuers publishing Metadata MUST make a JSON document available at the path formed by concatenating the string /.well-known/openid-credential-issuer to the Credential Issuer identifier. openid-credential-issuer MUST point to a JSON document compliant with this specification and MUST be returned using the application/json content type.\n",
        "type": "object",
        "required": [
          "credential_issuer",
          "credential_endpoint",
          "deferred_credential_endpoint",
          "credentials_supported"
        ],
        "properties": {
          "credential_issuer": {
            "title": "Credential Issuer",
            "description": "REQUIRED. The issuer's server identifier, which is a URL that uses the \"https\" scheme and has no query or fragment components. Authorization server metadata is published at a location that is \".well-known\" according to RFC 5785 [RFC5785]. If the issuer server acts as an authorisation server, this identifier is also used as the authorisation server identifier.\n\nNote: If the 'authorization_server' claim is not present, Credential Issuer is also acting as Authorisation Server. AS configuration is defined by the 'OpenID Connect Authorisation Server Metadata'\n",
            "type": "string",
            "format": "URL",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/issuer"
          },
          "authorization_server": {
            "title": "Authorisation Server",
            "description": "OPTIONAL. Used if the issuer relies on another authorisation server. The authorization server's issuer identifier, which is a URL that uses the \"https\" scheme and has no query or fragment components. Authorization server metadata is published at a location that is \".well-known\" according to RFC 5785 [RFC5785].\n\nIf this element is omitted, the entity providing the Credential Issuer is also acting as AS, i.e. the Credential Issuer's identifier is used as the OAuth Issuer value to obtain the authorization server metadata as per [RFC8414].\n",
            "type": "string",
            "format": "URL",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth"
          },
          "credential_endpoint": {
            "title": "Credential Endpoint",
            "description": "REQUIRED. URL of the Credential Issuer's Credential Endpoint. This URL MUST use the https scheme and MAY contain port, path and query parameter components.\n",
            "type": "string",
            "format": "URL",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/tnt/credential"
          },
          "deferred_credential_endpoint": {
            "title": "Deferred Credential Endpoint",
            "description": "REQUIRED. URL of the Credential Issuer's Deferred Credential Endpoint. This URL MUST use the https scheme and MAY contain port, path and query parameter components.\n",
            "type": "string",
            "format": "URL",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/tnt/credential_deferred"
          },
          "credentials_supported": {
            "description": "REQUIRED. A JSON array containing a list of JSON objects, each of them representing metadata about a separate credential type that the Credential Issuer can issue.\n",
            "type": "array",
            "items": {
              "description": "Metadata about the credential type that the credential issuer can issue",
              "type": "object",
              "required": [
                "format",
                "trust_framework"
              ],
              "properties": {
                "format": {
                  "description": "A JSON string identifying the format of this credential, e.g. jwt_vc or ldp_vc. Depending on the format value, the Supported Credentials Object contains further elements defining the type and (optionally) particular claims the credential may contain, and information how to display the credential. Appendix E defines Credential Format Profiles introduced by this specification.\n\nMUST be 'jwt_vc'\n",
                  "type": "string",
                  "enum": [
                    "jwt_vc"
                  ]
                },
                "trust_framework": {
                  "title": "Supported Trust Frameworks",
                  "description": "REQUIRED: A JSON object with information about the supported trust frameworks. The 'name' property must uniquely define the trust framework.\n\n'name' claim MUST be 'ebsi'\n",
                  "type": "object",
                  "required": [
                    "name",
                    "type",
                    "uri"
                  ],
                  "properties": {
                    "name": {
                      "title": "Unique Trust Framework name",
                      "type": "string",
                      "example": "ebsi"
                    },
                    "type": {
                      "title": "Credential type",
                      "type": "string",
                      "example": "Accreditation"
                    },
                    "uri": {
                      "title": "Accreditation URI",
                      "description": "Link to the Verifiable Accreditation based on which the VC is issued\n",
                      "type": "string",
                      "format": "URI"
                    }
                  }
                },
                "display": {
                  "title": "Display",
                  "description": "OPTIONAL. An array of objects, where each object contains display properties of a Credential Issuer for a certain language. Below is a non-exhaustive list of valid parameters that MAY be included:\n",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "OPTIONAL. String value of a display name for the Credential Issuer.\n",
                        "type": "string",
                        "example": "Verifiable Authorisation to onboard"
                      },
                      "locale": {
                        "description": "OPTIONAL. String value that identifies the language of this object represented as a language tag taken from values defined in BCP47 [RFC5646]. There MUST be only one object with the same language identifier\n",
                        "type": "string",
                        "example": "en-GB"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "authorisation_request_object": {
        "title": "Authentication Request Object",
        "description": "OpenID Connect Authorisation Request Object. The Request Object MUST be signed.\n\nSigning algorithm ES256 MUST be supported. To perform Signature Validation, the alg Header Parameter in the JOSE Header MUST match the value of the request_object_signing_alg set during Client Registration [OpenID.Registration] or a value that was pre-registered by other means. The signature MUST be validated against the appropriate key for that client_id and algorithm.\n\nThe Authorization Server MUST return an error if signature validation fails.\n\nReferences:\n  - [OIDC.core](https://openid.net/specs/openid-connect-core-1_0.html)\n  - [OID4VCI](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-10.html)\n  - [VC Data Model](https://www.w3.org/TR/2022/REC-vc-data-model-20220303/)\n",
        "type": "object",
        "required": [
          "iss",
          "aud",
          "exp",
          "scope",
          "response_type",
          "client_id",
          "redirect_uri",
          "authorization_details",
          "client_metadata"
        ],
        "properties": {
          "iss": {
            "title": "JWT Issuer Claim",
            "description": "The \"iss\" (issuer) claim identifies the actor who issued the JWT. The value MUST be the value of the client_id claim.\n",
            "type": "string",
            "format": "URL",
            "example": "https://my-issuer.eu/suffix/xyz\""
          },
          "aud": {
            "title": "JWT Audience Claim",
            "description": "The \"aud\" (audience) claim identifies the recipients that the JWT is intended for. The value MUST be the issuer's URL as defined in Issuer's OpenID-Configuration.issuer\n",
            "type": "string",
            "format": "URL",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth"
          },
          "exp": {
            "title": "JWT Expiration Time",
            "description": "The \"exp\" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.  The processing of the \"exp\" claim requires that the current date/time MUST be before the expiration date/time listed in the \"exp\" claim.\n",
            "type": "number",
            "format": "UNIX timestamp"
          },
          "scope": {
            "title": "scope",
            "description": "OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. See Sections 5.4 and 11 of OIDC.core for additional scope values defined by this specification.\n\nMUST match the value in the request URI.\n",
            "type": "string",
            "example": "openid"
          },
          "client_id": {
            "title": "Client ID",
            "description": "MUST match the value of the client_id in the REQUEST URI.\n",
            "type": "string",
            "format": "URI"
          },
          "response_type": {
            "title": "Response Type",
            "description": "REQUIRED. OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\nMUST be 'code' and MUST match the value of response_type in the request URI.\n",
            "type": "string",
            "example": "code"
          },
          "redirect_uri": {
            "title": "Redirect URI",
            "description": "Callback location where the authorization code or tokens should be sent.\n\nMUST match the value of redirect_uri in the request URI.\n",
            "type": "string",
            "format": "URI",
            "example": "https://example.com/token"
          },
          "state": {
            "title": "State",
            "description": "RECOMMENDED. Opaque value used to maintain state between the request\nand the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF)\nmitigation is done by cryptographically binding the value of this\nparameter with a browser cookie.\n"
          },
          "authorization_details": {
            "title": "OID4VCI Authorisation Details",
            "description": "OID authorisation details data model.",
            "type": "array",
            "items": {
              "description": "A list of authorisation details.\n",
              "type": "object",
              "required": [
                "type",
                "format",
                "locations"
              ],
              "properties": {
                "type": {
                  "title": "Authorisation Details Type",
                  "description": "JSON string that determines the authorization details type.\n\nMUST be set to openid_credential for the purpose of this specification.\n",
                  "type": "string",
                  "example": "openid_credential"
                },
                "format": {
                  "title": "VC Format",
                  "description": "JSON string representing a format in which the credential is requested to be issued. The value MUST be jwt_vc\n",
                  "type": "string",
                  "enum": [
                    "jwt_vc"
                  ],
                  "example": "jwt_vc"
                },
                "locations": {
                  "title": "Credential Issuer Identifier values",
                  "description": "If the Credential Issuer metadata contains an authorization_server parameter, the authorization detail's locations common data field MUST be set to the Credential Issuer Identifier value.\n",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "URL"
                  },
                  "example": [
                    "https://api-conformance.ebsi.eu/conformance/v3/issuer"
                  ]
                },
                "types": {
                  "title": "VC Type",
                  "description": "REQUIRED. JSON array designating the types a certain credential type supports according to [VC_DATA](https://www.w3.org/TR/2022/REC-vc-data-model-20220303/), Section 4.3.\n\nIt MUST contain a recognised VC type.\n",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "VerifiableCredential",
                    "VerifiableAttestation",
                    "VerifiableAuthorisationToOnboard",
                    "VerifiableAuthorisationForTrustChain",
                    "VerifiableAccreditationToAttest",
                    "VerifiableAccreditationToAccredit"
                  ]
                }
              }
            }
          },
          "client_metadata": {
            "title": "Client Metadata",
            "description": "OID authorisation details data model.",
            "type": "array",
            "items": {
              "type": "object"
            },
            "required": [
              "vp_formats_supported"
            ],
            "properties": {
              "authorization_endpoint": {
                "title": "Authorization endpoint",
                "description": "URL of the authorization server's authorization endpoint",
                "type": "string",
                "format": "URL",
                "example": "openid:"
              },
              "jwks_uri": {
                "title": "JWKS URI",
                "description": "Required for Service Wallets. URL of the authorization server's JWK Set document.\nMust start with client_id.\n",
                "type": "string",
                "format": "URL",
                "example": "https://my-issuer.rocks/jwks"
              },
              "scopes_supported": {
                "title": "OAuth 2.0 scopes",
                "description": "A JSON array containing a list of the OAuth 2.0 \"scope\" values that this authorization server supports",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "openid"
                ]
              },
              "response_types_supported": {
                "title": "OAuth 2.0 \"response_type\" values",
                "description": "A JSON array containing a list of the OAuth 2.0 \"response_type\" values that this authorization server supports",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "vp_token",
                  "id_token"
                ]
              },
              "subject_types_supported": {
                "title": "Subject Identifier types",
                "description": "A JSON array containing a list of the Subject Identifier types that this OP supports",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "public"
                ]
              },
              "id_token_signing_alg_values_supported": {
                "title": "ID Token signature algorithms",
                "description": "A JSON array containing a list of the JWS \"alg\" values supported by the OP for the ID Token",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "ES256"
                ]
              },
              "request_object_signing_alg_values_supported": {
                "title": "Request Object signature algorithms",
                "description": "A JSON array containing a list of the JWS \"alg\" values supported by the OP for Request Objects",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "ES256"
                ]
              },
              "vp_formats_supported": {
                "title": "Credential formats supported by the Wallet",
                "description": "A JSON Object containing a list of key value pairs, where the key is a string identifying a Credential format supported by the Wallet",
                "type": "object",
                "properties": {
                  "jwt_vp": {
                    "title": "A JSON Object, defining support for Verifiable Presentations in JWT format",
                    "type": "object",
                    "properties": {
                      "alg_values_supported": {
                        "title": "A JSON Array of case sensitive strings that identify the cryptographic suites that are supported",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "ES256"
                        ]
                      }
                    }
                  },
                  "jwt_vc": {
                    "title": "A JSON Object, defining support for Verifiable Credentials in JWT format",
                    "type": "object",
                    "properties": {
                      "alg_values_supported": {
                        "title": "A JSON Array of case sensitive strings that identify the cryptographic suites that are supported",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "ES256"
                        ]
                      }
                    }
                  }
                }
              },
              "subject_syntax_types_supported": {
                "title": "Supported subject syntaxes",
                "description": "A JSON Array of supported DID methods and their possible sub types",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "did:key",
                  "did:ebsi"
                ]
              },
              "id_token_types_supported": {
                "title": "ID Token types",
                "description": "A JSON array of strings containing the list of ID Token types supported by the OP",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "subject_signed_id_token"
                ]
              }
            }
          }
        }
      },
      "id_token_request_object": {
        "title": "ID Token Request Object",
        "description": "ID Token Request is returned by the Authorisation Server to the client to request a SIOP ID Token or a VP token and with it a proof of DID control. It is an OpenID Connect Authorisation Request Object. The Request Object MUST be signed.\n\nSigning algorithm ES256 MUST be supported. To perform Signature Validation, the alg Header Parameter in the JOSE Header MUST match the value of the Authorisation Server signing keys, which are discoverable through the jwks_uri claim in the Authorisation Server configuration.\n\nThe client MUST NOT proceed with the protocol if the signature validation fails.\n\nReferences:\n  - [OIDC.core](https://openid.net/specs/openid-connect-core-1_0.html)\n  - [OID4VCI](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-10.html)\n  - [VC Data Model](https://www.w3.org/TR/2022/REC-vc-data-model-20220303/)\n",
        "type": "object",
        "required": [
          "iss",
          "aud",
          "exp",
          "scope",
          "nonce",
          "response_type",
          "response_mode",
          "client_id",
          "redirect_uri"
        ],
        "properties": {
          "iss": {
            "title": "JWT Issuer Claim",
            "description": "The \"iss\" (issuer) claim identifies the actor who issued the JWT. The value MUST be the value of the issuer in the Authorisation Server's metadata (.well-known/openid-configuration)\n",
            "type": "string",
            "format": "URL",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth"
          },
          "aud": {
            "title": "JWT Audience Claim",
            "description": "The \"aud\" (audience) claim identifies the recipients that the JWT is intended for. The value MUST be the client_id from the Authentication Request sent by the client.\n",
            "type": "string",
            "format": "URL",
            "example": "https://my-issuer.eu/suffix/xyz\""
          },
          "exp": {
            "title": "JWT Expiration Time",
            "description": "The \"exp\" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.  The processing of the \"exp\" claim requires that the current date/time MUST be before the expiration date/time listed in the \"exp\" claim.\n",
            "type": "number",
            "format": "UNIX timestamp"
          },
          "scope": {
            "title": "scope",
            "description": "OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored. See Sections 5.4 and 11 of OIDC.core for additional scope values defined by this specification.\n\nMUST match tha value in the request URI.\n",
            "type": "string",
            "example": "openid"
          },
          "client_id": {
            "title": "Client ID",
            "description": "MUST match the \"iss\" value.\n",
            "type": "string",
            "format": "URI",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth"
          },
          "response_type": {
            "title": "Response Type",
            "description": "The SIOP must return an ID Token.\n\nMUST be 'id_token'\n",
            "type": "string",
            "example": "id_token"
          },
          "response_mode": {
            "title": "Response Mode",
            "description": "In this mode, Authorization Response parameters are encoded in the body using the application/x-www-form-urlencoded content type and sent using the HTTP POST method instead of redirecting back to the Client.\n\nMUST be 'direct_post'\n",
            "type": "string",
            "example": "direct_post"
          },
          "redirect_uri": {
            "title": "Redirect URI",
            "description": "Callback location where the ID Token should be sent.\n\nMUST match the value of redirect_uri in the request URI.\n",
            "type": "string",
            "format": "URI",
            "example": "https://example.com/token"
          },
          "nonce": {
            "title": "Nonce",
            "description": "REQUIRED. As specified in [Section 3.1.2. of OpenID.Core](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint) String value used to associate a Client session with an ID Token, and to mitigate\nreplay attacks.\n",
            "type": "string",
            "example": "b98be7bf"
          }
        }
      },
      "id_token_direct_post": {
        "title": "ID Token Response",
        "description": "ID Token as sent to the direct post endpoint of the Authorisation Server.\n",
        "type": "object",
        "properties": {
          "header": {
            "description": "JWT Header",
            "type": "object",
            "required": [
              "typ",
              "alg",
              "kid"
            ],
            "properties": {
              "typ": {
                "description": "Payload type",
                "type": "string",
                "enum": [
                  "JWT"
                ]
              },
              "alg": {
                "description": "Signing Algorithm. ES256 algorithm MUST be supported, other algorithms may be supported.\n",
                "type": "string",
                "enum": [
                  "ES256",
                  "ES256K",
                  "RS256",
                  "EdDSA"
                ]
              },
              "kid": {
                "description": "Signing Key Identifier. It MUST be a valid EBSI-compliant DID.\n",
                "type": "string",
                "format": "URI"
              }
            }
          },
          "payload": {
            "description": "JWT Payload",
            "type": "object",
            "required": [
              "iss",
              "sub",
              "aud",
              "iat",
              "exp",
              "nonce"
            ],
            "properties": {
              "iss": {
                "title": "JWT Issuer",
                "description": "The \"iss\" (issuer) claim identifies the actor who issued the JWT. iss MUST be the DID of the client.\n",
                "type": "string",
                "format": "URL",
                "example": "https://my-issuer.eu/suffix/xyz"
              },
              "sub": {
                "title": "JWT Subject",
                "description": "Identifier that identifies the user the ID Token is about. Value MUST be the DID and must match the iss claim.\n",
                "type": "string",
                "format": "URL",
                "example": "https://my-issuer.eu/suffix/xyz"
              },
              "aud": {
                "title": "JWT Audience (the recipient)",
                "description": "The \"aud\" (audience) claim identifies the recipients that the JWT is intended for. The value MUST be Authorisation Server's id - the issuer claim in the openid-configuration of the Authorisation Server.\n",
                "type": "string",
                "format": "URL",
                "example": "https://api-conformance.ebsi.eu/conformance/v3/auth"
              },
              "iat": {
                "title": "JWT Issuance Time",
                "description": "Time at which the JWT was issued.\n",
                "type": "number",
                "format": "uint",
                "example": 1675268413
              },
              "exp": {
                "title": "JWT Expiration Time",
                "description": "The \"exp\" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing. The processing of the \"exp\" claim requires that the current date/time MUST be before the expiration date/time listed in the \"exp\" claim.\n",
                "type": "number",
                "format": "uint",
                "example": 1675268413
              },
              "state": {
                "title": "State",
                "description": "RECOMMENDED. An opaque value used by the client to maintain state between the request and callback.The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery. \n\nThe `state` parameter is mandatory for the ID Token Response when it is present in the ID Token Request sent by the \"Authorization Server.\" In such cases, the Client must ensure that the values of the `state` parameter are identical in both.\n",
                "type": "string",
                "example": "48a2bac6-130a-4378-bcc2-04eb57c543b9"
              },
              "nonce": {
                "title": "JWT Nonce",
                "description": "Value used to associate a Client session with an ID Token. The value MUST match the nonce from the ID Token Request.\n",
                "type": "string",
                "example": "n-0S6_WzA2Mj"
              }
            }
          }
        }
      },
      "jwks": {
        "title": "JSON Web Key Set",
        "required": [
          "keys"
        ],
        "type": "object",
        "description": "JSON Web Key Set (JWKS) - A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.\n",
        "properties": {
          "keys": {
            "type": "array",
            "description": "List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.\n",
            "items": {
              "title": "JSON Web Key",
              "required": [
                "kty"
              ],
              "type": "object",
              "properties": {
                "kty": {
                  "type": "string"
                },
                "crv": {
                  "type": "string"
                },
                "alg": {
                  "type": "string"
                },
                "n": {
                  "type": "string"
                },
                "e": {
                  "type": "string"
                },
                "x": {
                  "type": "string"
                },
                "y": {
                  "type": "string"
                },
                "kid": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "keys": [
            {
              "kty": "EC",
              "crv": "P-256",
              "alg": "ES256",
              "x": "FMWOWBx2VroVMZVmn-TOU_943V7eYKQDl3GpDFjLQd4",
              "y": "7EGGmZW9ZhhJQUxSPH3_mpbxyNvC5eeBchGPkccZmGk",
              "kid": "FLxI3LM8mFCFCD1H4VjZqWt1Pfid2i8ACYiDvEzZ9UM"
            }
          ]
        }
      },
      "id_token_request": {
        "title": "ID Token Request",
        "description": "The mock Auth will validate the request and will proceed by requesting authentication of a DID from the client. The ID Token Request is also an Authorisation Request, and it is using signed Request Object. The Request Object is signed with Auth Server private keys, which are discoverable through jwks_uri parameter. The request is using response_mode=direct_post and the response location is delivered in redirect_uri.\n\nToken Request Object is defined in the 'ID Token Request Object' schema\n",
        "type": "object",
        "required": [
          "scope",
          "response_type",
          "client_id",
          "redirect_uri"
        ],
        "properties": {
          "scope": {
            "title": "scope",
            "description": "REQUIRED. OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified.\n\nMUST be openid.\n",
            "type": "string",
            "example": "openid"
          },
          "response_type": {
            "title": "Response Type",
            "description": "REQUIRED. OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.\n\nMUST be 'id_token'\n",
            "type": "string",
            "example": "id_token"
          },
          "client_id": {
            "title": "Client ID",
            "description": "OAuth 2.0 Client Identifier valid at the Authorization Server.\n\nVerifiable Accreditation Issuance: MUST be URL of the issuer requesting the accreditation that was registered with the Accreditation Issuer\n",
            "type": "string",
            "format": "URL",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth"
          },
          "redirect_uri": {
            "title": "Redirect URI",
            "description": "REQUIRED. Redirection URI to which the response (direct post) will be sent. This URI MUST exactly match one of the Redirection URI values in the Authorisation Server configuration -- definition is taken from\n",
            "type": "string",
            "format": "URI",
            "example": "https://api-conformance.ebsi.eu/conformance/v3/auth/direct_post"
          },
          "request": {
            "title": "Request",
            "description": "CONDITIONAL. Authorisation Request Object - The Request Object must be signed with the client's private keys, owned by the requesting client_id. The used private key's public key must be discoverable through client's openid-configuration through jwks_uri parameter.\n\nSee the ID Token Request Object schema.\n\nOne of `request` or `request_uri` MUST be present.\n",
            "type": "string",
            "format": "^(([A-Za-z0-9\\-_])+\\.)([A-Za-z0-9\\-_]+)(\\.([A-Za-z0-9\\-_]+))?$",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImM0S3JlcEpYem1CTVctcW8ybnREQ3drVGdMbTJDYl81ZWFiemtsalRoXzAifQ.eyJpc3MiOiJodHRwczovL2FwaS5jb25mb3JtYW5jZS5lYnNpLmV1L2NvbmZvcm1hbmNlL3YzL2F1dGgtbW9jayIsImF1ZCI6Imh0dHBzOi8vbXktaXNzdWVyLmV1L3N1ZmZpeC94eXoiLCJleHAiOjE1ODk2OTkxNjIsInJlc3BvbnNlX3R5cGUiOiJpZF90b2tlbiIsInJlc3BvbnNlX21vZGUiOiJkaXJlY3RfcG9zdCIsImNsaWVudF9pZCI6Imh0dHBzOi8vYXBpLmNvbmZvcm1hbmNlLmVic2kuZXUvY29uZm9ybWFuY2UvdjMvYXV0aC1tb2NrIiwicmVkaXJlY3RfdXJpIjoiaHR0cHM6Ly9hcGkuY29uZm9ybWFuY2UuZWJzaS5ldS9jb25mb3JtYW5jZS92My9hdXRoLW1vY2svZGlyZWN0X3Bvc3QiLCJzY29wZSI6Im9wZW5pZCIsIm5vbmNlIjoibi0wUzZfV3pBMk1qIn0.YZVxzzD-RnNoo5ocQxhHHgv0Vie7zypOjm_EmdBjYy5OSKdRAjY5ehdvKrIVjW3L4XZjhOiWhvi-J73Ph6HbPA\n"
          },
          "request_uri": {
            "title": "Request URI",
            "description": "CONDITIONAL. This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\nSee the ID Token Request Object schema.\n\nOne of `request` or `request_uri` MUST be present.\n",
            "type": "string",
            "format": "URI"
          },
          "state": {
            "title": "State",
            "description": "RECOMMENDED. An opaque value used by the client to maintain state between the request and callback.The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery. \n\nThe `state` parameter is mandatory for the ID Token Response when it is present in the ID Token Request sent by the \"Authorization Server.\" In such cases, the Client must ensure that the values of the `state` parameter are identical in both.\n",
            "type": "string",
            "example": "48a2bac6-130a-4378-bcc2-04eb57c543b9"
          }
        },
        "example": {
          "scope": "openid",
          "response_type": "id_token",
          "client_id": "https://api-conformance.ebsi.eu/conformance/v3/auth",
          "redirect_uri": "https://api-conformance.ebsi.eu/conformance/v3/auth/cb",
          "request": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6ImM0S3JlcEpYem1CTVctcW8ybnREQ3drVGdMbTJDYl81ZWFiemtsalRoXzAifQ.eyJpc3MiOiJodHRwczovL2FwaS5jb25mb3JtYW5jZS5lYnNpLmV1L2NvbmZvcm1hbmNlL3YzL2F1dGgtbW9jayIsImF1ZCI6Imh0dHBzOi8vbXktaXNzdWVyLmV1L3N1ZmZpeC94eXoiLCJleHAiOjE1ODk2OTkxNjIsInJlc3BvbnNlX3R5cGUiOiJpZF90b2tlbiIsInJlc3BvbnNlX21vZGUiOiJkaXJlY3RfcG9zdCIsImNsaWVudF9pZCI6Imh0dHBzOi8vYXBpLmNvbmZvcm1hbmNlLmVic2kuZXUvY29uZm9ybWFuY2UvdjMvYXV0aC1tb2NrIiwicmVkaXJlY3RfdXJpIjoiaHR0cHM6Ly9hcGkuY29uZm9ybWFuY2UuZWJzaS5ldS9jb25mb3JtYW5jZS92My9hdXRoLW1vY2svZGlyZWN0X3Bvc3QiLCJzY29wZSI6Im9wZW5pZCIsIm5vbmNlIjoibi0wUzZfV3pBMk1qIn0.YZVxzzD-RnNoo5ocQxhHHgv0Vie7zypOjm_EmdBjYy5OSKdRAjY5ehdvKrIVjW3L4XZjhOiWhvi-J73Ph6HbPA",
          "state": "48a2bac6-130a-4378-bcc2-04eb57c543b9"
        }
      },
      "access_token_response": {
        "title": "Access Token Response",
        "type": "object",
        "description": "Access Token Response",
        "required": [
          "access_token",
          "id_token",
          "token_type",
          "expires_in",
          "c_nonce",
          "c_nonce_expires_in"
        ],
        "properties": {
          "access_token": {
            "title": "Access Token",
            "description": "The access token issued by the authorization server.\n\nThe Access Token MUST be signed by the authorisation server.\n",
            "type": "string",
            "format": "JWS"
          },
          "id_token": {
            "title": "ID Token",
            "description": "The ID token issued by the authorization server.\n",
            "type": "string",
            "format": "JWS"
          },
          "token_type": {
            "title": "Token Type",
            "description": "The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes).\n",
            "type": "string",
            "enum": [
              "bearer"
            ]
          },
          "expires_in": {
            "title": "Expires in",
            "type": "integer",
            "description": "The lifetime in seconds of the access token. For example, the value \\\"3600\\\" denotes that the access token will expire in one hour from the time the response was generated.\n\nLifetime must be 86400 seconds.\n"
          },
          "c_nonce": {
            "title": "Challenge Nonce",
            "description": "JSON string containing a nonce to be used to create a proof of possession of key material when requesting a Credential (see Section 7.2 of OpenID for VCI). When received, the Wallet MUST use this nonce value for its subsequent credential requests until the Credential Issuer provides a fresh nonce.\n",
            "type": "string"
          },
          "c_nonce_expires_in": {
            "title": "Challenge Nonce expires in",
            "type": "integer",
            "description": "The lifetime in seconds of the c_nonce token. For example, the value \\\"3600\\\" denotes that the access token will expire in one hour from the time the response was generated.\n"
          }
        }
      },
      "token_request": {
        "title": "Token Request",
        "description": "A Client makes a Token Request by presenting its Authorization Grant (in the form of an Authorization Code) to the Token Endpoint using the grant_type value authorization_code\n",
        "type": "object",
        "required": [
          "grant_type"
        ],
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "description": "MUST have the value `authorization_code` or `urn:ietf:params:oauth:grant-type:pre-authorized_code`\n",
            "type": "string",
            "enum": [
              "authorization_code",
              "urn:ietf:params:oauth:grant-type:pre-authorized_code"
            ]
          },
          "client_id": {
            "title": "Client ID",
            "description": "REQUIRED when `grant_type` is `authorization_code`.\n\nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\nVerifiable Accreditation Issuance: MUST be URL of the issuer requesting the accreditation that was registered with the Accreditation Issuer\n",
            "type": "string",
            "format": "URL"
          },
          "code": {
            "title": "Authorisation Code",
            "description": "REQUIRED when `grant_type` is `authorization_code`.\n\nAn opaque value that can be used to redeem tokens from the token endpoint.\n\n`code` is returned if the `response_type` includes `code`. The code has a lifetime of 300 seconds.\nIt MUST match the value from the authentication response.\n",
            "type": "string"
          },
          "client_assertion_type": {
            "title": "Client Assertion Type",
            "description": "The format of the assertion as defined by the authorization server.  The value will be an absolute URI.\n",
            "example": true
          },
          "code_verifier": {
            "title": "Code TnT",
            "description": "Wallet generated secure random token, used to validate the original `code_challenge` provided in initial Authorisation Request.\n",
            "example": "QER5PeLTrvoJakGLzYJmL78ngOdP4AlVX_FG1d4Va22XuOYKFtEt1yQyRtD6-gfd47g"
          },
          "pre-authorized_code": {
            "title": "Pre-authorized code",
            "description": "CONDITIONAL. The code representing the authorization to obtain Credentials of a certain type.\nThis parameter is required if the `grant_type` is `urn:ietf:params:oauth:grant-type:pre-authorized_code`.\nIn WCT v3 Holder wallet tests, the code corresponds to the string concatenation of the last 4 bytes (modulo 10) of the sha256 hash of the user DID.\nExample: the code corresponding to the DID `did:key:z2dmzD81cgPx8Vki7JbuuMmFYrWPgYoytykUZ3eyqht1j9KbsDbVZXdb3jzCagESyY4EE2x7Yjx3gNwctoEuRCKKDrdNP3HPFtG8RTvBiYStT5ghBHhHizH2Dy6xQtW3Pd2SecizL9b2jzDCMr7Ka5cRAWZFwvqwAtwTT7xet769y9ERh6` is \"5910\".\n",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6Ink2UTFUTWN4am4zU1ZDT0dNUm9mZHA0M1owU0tGMVROSTkwcG5CWldSZkkifQ.eyJjbGllbnRfaWQiOiJkaWQ6a2V5OnoyZG16RDgxY2dQeDhWa2k3SmJ1dU1tRllyV1BnWW95dHlrVVozZXlxaHQxajlLYnAyNzlvbUFRdW5ac1g4NXEydG5WdUR6Wk1BZzlSa3NFRTN6UmFxWkVOWWRwWkt2ZVpxOWZXTlZlY0IySlNMbllFTVI4cHFwWXNxZUZaTG5KeGdiUlVtV3d1N1Y5aG8xMkdSUGRrekVaR2JmNDdodTI2NHJYQUppS3g0dUxkRW50UTQiLCJhdXRob3JpemF0aW9uX2RldGFpbHMiOlt7InR5cGUiOiJvcGVuaWRfY3JlZGVudGlhbCIsImZvcm1hdCI6Imp3dF92YyIsImxvY2F0aW9ucyI6WyJodHRwOi8vbG9jYWxob3N0OjMwMDAvY29uZm9ybWFuY2UvdjMvaXNzdWVyLW1vY2siXSwidHlwZXMiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJWZXJpZmlhYmxlQXR0ZXN0YXRpb24iLCJDVFdhbGxldENyb3NzUHJlQXV0aG9yaXNlZCJdfV0sImlhdCI6MTY4MjU5MTM3OSwiZXhwIjoxNjgyNTkxNjc5LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjMwMDAvY29uZm9ybWFuY2UvdjMvaXNzdWVyLW1vY2siLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjMwMDAvY29uZm9ybWFuY2UvdjMvYXV0aC1tb2NrIiwic3ViIjoiZGlkOmtleTp6MmRtekQ4MWNnUHg4VmtpN0pidXVNbUZZcldQZ1lveXR5a1VaM2V5cWh0MWo5S2JwMjc5b21BUXVuWnNYODVxMnRuVnVEelpNQWc5UmtzRUUzelJhcVpFTllkcFpLdmVacTlmV05WZWNCMkpTTG5ZRU1SOHBxcFlzcWVGWkxuSnhnYlJVbVd3dTdWOWhvMTJHUlBka3pFWkdiZjQ3aHUyNjRyWEFKaUt4NHVMZEVudFE0In0.Het3grzaEhEkr3tQPgyjx7cNTI8G7hKdODJaOFlemKk-PkVEmxtmaeolNo1M1kXyQe20hD3RFt81FCl6n_MA9Q"
          },
          "user_pin": {
            "title": "User PIN",
            "description": "OPTIONAL. String value containing a user PIN.\nThis value MUST be present if `user_pin_required` was set to `true` in the Credential Offer.\nThe string value MUST consist of maximum 8 numeric characters (the numbers 0 - 9).\nThis parameter MUST only be used if the `grant_type` is `urn:ietf:params:oauth:grant-type:pre-authorized_code`.\n",
            "example": "1234"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}